---
suppress-bibliography: true
---

# Git et GitHub

::: {.content-visible when-format="html" unless-format="revealjs"}

```{=html}
<iframe src="_slides/git.html"></iframe>
```
[Ouvrir dans mon navigateur](_slides/git.html){target="_blank"} 

::: 

## Versionnement 

Git est un outil de versionnement et de synchronisation de fichiers. 

Intérets : 

- gestion de nombreuses versions de plusieurs fichiers ; 
- éviter les ```memoire-2024-reluJeanJacques-version-finale-ok-ultime-v4-2024-10-18.docx``` ; 
- collaboration 
- Établir une version du texte + travailler sur ses états 

![](img/version.png)

## Git vs Github

Git : Logiciel de gestion de versions décentralisé libre et gratuit (installé sur votre ordinateur) 

GitHub : Service web d'hébergement et de gestion de développement de logiciels (service en ligne)

### Git 

- Système de gestion de versions décentralisées créé pour gérer des fichiers textes de projets informatiques ; 
- (Très) complexe, mais utilisation basique possible ; 
- Conservation de toutes les versions des fichiers d’un projet à chaque enregistrement ; 
- Git est utilisé sur des plateformes comme GitHub ou GitLab qui en facilite (grandement) l’usage.

### GitHub  

Service web d'hébergement qui utilise le logiciel de versions Git 

- Propriété : Microsoft ; 
- Alternatives libres : GitLab, Framagit 

### Fonctionnement 

- Branches : comparer, fusionner, suivre ; 
- Local / remote : 
  - `pull` : pour récupérer les modifications de la version en ligne ; 
  - `push` : pour publier les modifications vers la version en ligne ; 
- Description des modifications 
  
## Quelques commandes de base {.smaller}

- `git clone [repertoire]` : clone un "répertoire distant" sur la machine locale dans un "répertoire local", par exemple depuis le serveur framagit.org. Exemple : `git clone https://framagit.org/marviro/tutorielmdpandoc.git` ; 
  - `git add fichier.md` : ajoute **un** fichier à l'index pour préparer un "commit" ciblé ; 
  - `git add .` : ajoute **tous** les fichiers à l'index pour préparer un "commit" ; 
- `git commit -m "message pour documenter la modification"` : valide un commit avec un message d'information, et donc déclare et inscrit les modifications au registre Git (enregistrement de l’état du projet). 
  - `commit` = *label* de la version complété par l'utilisateur pour décrire la modification effectuée
- `git pull` : synchronise le répertoire local depuis le répertoire distant, ce qui permet de récupérer des modifications faites par d'autres contributeurs (on _tire_ les modifications des autres depuis le serveur).
- `git push` : synchronise le répertoire distant à partir du répertoire local, ce qui permet de partager son travail avec d'autres contributeurs (on _pousse_ ses modifications vers le serveur).
- `git status` : présente un état du répertoire : quels fichiers ont été ajoutés, modifiés, supprimés, non ajoutés au registre, etc.

### Quelques commandes un peu plus complexes 

- `git diff` : présente les changements de chaque fichier modifié.
- `git log` : présente une liste de commit. C'est l'état du registre, une forme d'historique des modifications.
- `git checkout` : changement ou création de branches, ce qui permet d’avoir une version dupliquée du projet ;
- `git rebase` ou `git merge` : fusion de plusieurs versions d’un même fichier (par exemple en réunissant plusieurs branches parallèles). 

## Git chatons 

![Tomomi Imura (<https://girliemac.com/>)](img/git-purr-01.jpg)

## Exercice - créer son premier répertoire {.smaller}

Vous allez créer un premier répertoire. Allons-y pas à pas :

1. ouvrez un terminal.

- Par défaut, le terminal s'ouvre dans votre dossier personnel.  
- Lancez la commande `ls` pour vous en assurer.

2. créer un dossier GitHub : `mkdir github` et naviguez dedans `cd github`. Le terminal est maintenant positionné dans le répertoire `github`. 
3. dans votre navigateur, allez sur votre compte GitHub puis cliquer sur [New Project]. Renseignez le _Project name_ avec votre prénom (sans accents), puis cochez la case "Initialize repository with a README", et enfin le bouton [Create project].
4. vous venez de créer un projet git. Vous allez maintenant le cloner, c'est-à-dire récupérer le répertoire sur votre machine en local. Pour cela, commencez par copier-coller l'url de clonage en cliquant sur le bouton bleu [Clone] en haut à droite, et en copiant l'url HTTPS.
5. dans le terminal, écrivez la commande `git clone` puis coller l'url copiée, et lancez la commande complète, par exemple : `git clone https://github.com/monprenom/monprojet.git`
6. ... 

</section>
<section>

6. Git télécharge le répertoire et crée un nouveau répertoire [monprenom] dans le répertoire GitHub. Naviguez dans ce nouveau répertoire `cd monprenom`.
7. `ls` ou `ls -a` ou encore `ll` permet de lister tous les fichiers du répertoire. Pour le moment, il n'y a pas grand chose.
8. nous allons récupérer les sources de votre article édité sur Stylo en lançant un export ZIP. Une fois le dossier compressé téléchargé, décompressez le et copier les trois fichiers dans votre répertoire [monprenom]. Renommez les fichiers selon une bonne nomenclature.
9. nous pouvons maintenant ajouter ces fichiers à l'index Git : `git add .`, puis générer un premier commit pour ajouter ces fichiers au registre : `git commit -m "initialisation de l'article"`. On peut vérifier le registre avec `git log`.
10. essayons maintenant de synchroniser les modifications en local avec le serveur : `git push`. Sur le site de GitHub, votre répertoire est maintenant mis-à-jour.

</section>
<section>

Vous êtes maintenant en mesure de faire des modifications et de les synchroniser avec GitHub. Pendant le travail d'édition, vous pouvez régulièrement valider les modifications et synchroniser avec le serveur. Il suffit pour cela de répéter les opérations 9 et 10 :
  - `git add .`
  - `git commit -m "message"`
  - `git push`

## Installation de Git 

https://git-scm.com/downloads 